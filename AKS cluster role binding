apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: cluster-admin
  resourceVersion: "41"
  selfLink: /apis/rbac.authorization.k8s.io/v1/clusterroles/cluster-admin
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
  
###########################################################################################################
###Storage secret:

apiVersion: v1
kind: Secret
metadata:
  name: azure-storage-covnpl-secret
type: Opaque
data:
  azurestorageaccountname: YW1yYmNpYWNoa2Fuc3RnZGlhZzAx
  azurestorageaccountkey: "dlpXbmQ1NUdFUEk2Y1dGOHUyTmd0Y2U4SUpQTm44eXRwdG5YeHNHeVU5a3RJQld0YW5pY01vZTFobHZaSW90ekluOTE3YWlQYzFoTTVicFBHUWhLL3c9PQ=="
  
  ############################################################################################################################
  
  
  ###Deploy Splunk prod
  
  apiVersion: v1
kind: Namespace
metadata:
  name: splunk
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: rbprxbpm-aksnodelogger
  namespace: splunk
  labels:
    k8s-app: h3g-logging
  annotations:
    container.apparmor.security.beta.kubernetes.io/rbprxbpm-aksnodelogger: runtime/default
spec:
  selector:
    matchLabels:
      name: rbprxbpm-aksnodelogger
  template:
    metadata:
      labels:
        name: rbprxbpm-aksnodelogger
      annotations:
       container.apparmor.security.beta.kubernetes.io/rbprxbpm-aksnodelogger: runtime/default
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 8256
        runAsNonRoot: true
        fsGroup: 4
      containers:
      - name: rbprxbpm-aksnodelogger
        image: rbprxifaksacr01.azurecr.io/splunk/splunk-forwarder:8.2.2.1
        securityContext:
         allowPrivilegeEscalation: false
        env:
        - name: SPLUNKTIMEZONE
          value: "UTC"
        resources:
          limits:
            cpu: 1000m
            memory: 2000Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
          
          
## /opt/splunkforwarder/etc/apps/h3g_all_deploymentclient/local

#######################################################################################################


###RBAC for CSS

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-users
  namespace: default
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["deployments", "replicasets", "pods", "pods/status", "pods/logs", "services", "ingresses", "configmaps", "daemonsets", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: CCS-AKS-Cluster-Administrators
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: "3cfc31c3-f160-4ca9-b54b-58c472964e92"
  
  #############################################################################################################
  
  
  ###Cluster role binding
  
  kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-users
  namespace: default
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["deployments", "replicasets", "pods", "pods/status", "pods/logs", "services", "ingresses", "configmaps", "daemonsets", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: Channels-AKS-Cluster-Users
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-users
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: "cf08eee5-02bd-4204-8443-4bbc57ec8cc6"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: Channels-AKS-Cluster-Administrators
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: "c28ca8c0-ac46-4f2d-b910-982ab30bdf56"

############################################################################################################


##

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-users
  namespace: default
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["deployments", "replicasets", "pods", "pods/status", "pods/logs", "services", "ingresses", "configmaps", "daemonsets", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: CORM-AKS-Cluster-Users
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-users
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: "a486de63-b900-4cda-891e-5138c1380b71"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: CORM-AKS-Cluster-Administrators
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: CORM-AKS-Cluster-Administrators

########################################################################################################


### Cluster role binding for intergration 

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-users
  namespace: default
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["deployments", "replicasets", "pods", "pods/status", "pods/logs", "services", "ingresses", "configmaps", "daemonsets", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: Integration-AKS-Cluster-Users
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-users
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: "0b5eb79b-27fd-4fee-a77e-afa842950b11"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: Integration-AKS-Cluster-Administrators
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: "43b23033-9796-4720-867e-dfc4e976c7d8"
  
  
  ###################################################################################
  
  ###Cluster role binding for horizonal
  
  kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-users
  namespace: default
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["deployments", "replicasets", "pods", "pods/status", "pods/logs", "services", "ingresses", "configmaps", "daemonsets", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
 name: LHA-AKS-Cluster-Administrators
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: "26a1be68-9c32-449e-bd88-a8c22b9b2ac3"
  
  ###################################################################################3
  
  
  ##templete without RBAC Json
  {
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "The location of AKS resource."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The number of agent nodes for the cluster."
            },
            "minValue": 1,
            "maxValue": 50
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "servicePrincipalClientId": {
            "metadata": {
                "description": "Client ID (used by cloudprovider)"
            },
            "type": "securestring"
        },
        "servicePrincipalClientSecret": {
            "metadata": {
                "description": "The Service Principal Client Secret."
            },
            "type": "securestring"
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.7.7",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "networkPlugin": {
            "type": "string",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "maxPods": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Maximum number of pods that can run on a node."
            }
        },
        "vnetSubnetID": {
            "type": "string",
            "metadata": {
                "description": "Resource ID of virtual network subnet used for nodes and/or pods IP assignment."
            }
        },
        "serviceCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        "scope": {
            "type": "string",
            "metadata": {
                "description": "The subnet resource ID to apply the role assignments"
            }
        },
        "principalId": {
            "type": "string",
            "metadata": {
                "description": "The objectId of service principal"
            }
        }
    },
    "resources": [
        {
            "apiVersion": "2018-03-31",
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[parameters('location')]",
            "name": "[parameters('resourceName')]",
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                    {
                        "name": "rbsiachccaks",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "[parameters('osType')]",
                        "storageProfile": "ManagedDisks",
                        "vnetSubnetID": "[parameters('vnetSubnetID')]"
                    }
                ],
                "servicePrincipalProfile": {
                    "ClientId": "[parameters('servicePrincipalClientId')]",
                    "Secret": "[parameters('servicePrincipalClientSecret')]"
                },
                "networkProfile": {
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                },
				 "linuxProfile": {
					  "adminUsername": "cloudinfraadmin",
					  "ssh": {
						"publicKeys": [
						  {
							"keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAxXpGq2mAx/cCcIaTp5Onm79gugdl0FauwP4KneY6uZX6+gdhjLXysqJcUqYHVThARSsU9aJjc72/TU+F5AqJ2h+LoU3dWXb81cbu5tLzehp88+T4GTJ6I4YZJQJak57nmqX0nr0frcQxBY3wOoOvRihqEiM7kRT287SlVLnhJ/tRKl3RD2Jc4gJ0+1ybMQG/H+NyArRIXjU+5/vP+4fRm4teQFYMvla0afY32qvGMCaHe9CucF6ena86DxNgD1Qel8y9Kc37ftnHlOn+PO13ujgWvWi0R4zoYRR72v/j+m/+nvd4Tt0Z5WF0qKAt0QrXsGyx5GFMRiBiigM/nbhj6Q=="
						  }
						]
					  }
					}
            },
            "tags": {}
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).fqdn]"
        }
    }
}

#####################################################################################


##Templete with RBAC json

{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "The location of AKS resource."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
		"agentPoolName": {
            "type": "string",
            "metadata": {
                "description": "The name of the agentPool(Slave VM)"
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The number of agent nodes for the cluster."
            },
            "minValue": 1,
            "maxValue": 50
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "servicePrincipalClientId": {
            "metadata": {
                "description": "Client ID (used by cloudprovider)"
            },
            "type": "securestring"
        },
        "servicePrincipalClientSecret": {
            "metadata": {
                "description": "The Service Principal Client Secret."
            },
            "type": "securestring"
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.7.7",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "networkPlugin": {
            "type": "string",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "maxPods": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Maximum number of pods that can run on a node."
            }
        },
        "vnetSubnetID": {
            "type": "string",
            "metadata": {
                "description": "Resource ID of virtual network subnet used for nodes and/or pods IP assignment."
            }
        },
        "serviceCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        "scope": {
            "type": "string",
            "metadata": {
                "description": "The subnet resource ID to apply the role assignments"
            }
        },
        "principalId": {
            "type": "string",
            "metadata": {
                "description": "The objectId of service principal"
            }
        },
		"Tag_PROJECT": {
            "type": "string",
            "metadata": {
                "description": "The Tag value of PROJECT"
            }
        },
		"Tag_APPLICATION": {
            "type": "string",
            "metadata": {
                "description": "The Tag value of APPLICATION"
            }
        },
		"Tag_APPLICATION_CODE": {
            "type": "string",
            "metadata": {
                "description": "The Tag value of APPLICATION_CODE"
            }
        },
		"Tag_ENVIRONMENT": {
            "type": "string",
            "metadata": {
                "description": "The Tag value of ENVIRONMENT"
            }
        },
		"Tag_OWNER": {
            "type": "string",
            "metadata": {
                "description": "The Tag value of OWNER"
            }
        }
		
    },
    "resources": [
        {
            "apiVersion": "2018-03-31",
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[parameters('location')]",
            "name": "[parameters('resourceName')]",
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                    {
                        "name": "[parameters('agentPoolName')]",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "[parameters('osType')]",
                        "storageProfile": "ManagedDisks",
                        "vnetSubnetID": "[parameters('vnetSubnetID')]"
                    }
                ],
                "servicePrincipalProfile": {
                    "ClientId": "[parameters('servicePrincipalClientId')]",
                    "Secret": "[parameters('servicePrincipalClientSecret')]"
                },
				"enableRBAC": true,
				    "aadProfile": {
					  "clientAppID": "21db791d-88c5-49e1-a546-61a9125e208d",
					  "serverAppID": "aa129391-7a4a-4918-964d-64d51c60f359",
					  "serverAppSecret": "Jv5ULk0P2Hx4M9j4TnV5LkdxSWZHbggNVYQVNcFPVgU=",
					  "tenantID": "a095b75b-77a2-4e28-afc2-27edd1d6b0ab"
					},
                "networkProfile": {
                    "networkPlugin": "[parameters('networkPlugin')]",
					"loadBalancerSku": "standard",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                },
				 "linuxProfile": {
					  "adminUsername": "cloudinfraadmin",
					  "ssh": {
						"publicKeys": [
						  {
							"keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAxXpGq2mAx/cCcIaTp5Onm79gugdl0FauwP4KneY6uZX6+gdhjLXysqJcUqYHVThARSsU9aJjc72/TU+F5AqJ2h+LoU3dWXb81cbu5tLzehp88+T4GTJ6I4YZJQJak57nmqX0nr0frcQxBY3wOoOvRihqEiM7kRT287SlVLnhJ/tRKl3RD2Jc4gJ0+1ybMQG/H+NyArRIXjU+5/vP+4fRm4teQFYMvla0afY32qvGMCaHe9CucF6ena86DxNgD1Qel8y9Kc37ftnHlOn+PO13ujgWvWi0R4zoYRR72v/j+m/+nvd4Tt0Z5WF0qKAt0QrXsGyx5GFMRiBiigM/nbhj6Q=="
						  }
						]
					  }
					}
            },
            "tags": {
				"PROJECT": "[parameters('Tag_PROJECT')]",
                "APPLICATION": "[parameters('Tag_APPLICATION')]",
                "APPLICATION_CODE": "[parameters('Tag_APPLICATION_CODE')]",
                "COSTCENTERID": "NA",
                "OWNER": "[parameters('Tag_OWNER')]",
                "ENVIRONMENT": "[parameters('Tag_ENVIRONMENT')]"		
			}
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).fqdn]"
        }
    }
}

##################################################################################################################
